package crud

import (
	"context"
	"database/sql"

	
	"github.com/hongshengjie/crud/xsql"

	{{- range $index,$table := . }}
   	"{{$table.RelativePath}}/{{$table.PackageName}}"
	{{- end}}  

)

type Client struct {
	config *xsql.Config
	db     *xsql.DB
	{{- range $index,$table := . }}
   	{{$table.GoTableName}} *{{$table.GoTableName}}Client
	{{- end}} 
}

func (c *Client) init() {
	{{- range $index,$table := . }}
   	c.{{$table.GoTableName}} =  &{{$table.GoTableName}}Client{eq: c.db, config: c.config}
	{{- end}} 
}

type Tx struct {
	config *xsql.Config
	tx     *sql.Tx

	{{- range $index,$table := . }}
   	{{$table.GoTableName}} *{{$table.GoTableName}}Client
	{{- end}} 
}

func (tx *Tx) init() {
	{{- range $index,$table := . }}
   	tx.{{$table.GoTableName}} =  &{{$table.GoTableName}}Client{eq: tx.tx, config: tx.config}
	{{- end}} 
}

func NewClient(config *xsql.Config) (*Client, error) {
	db, err := xsql.NewMySQL(config)
	if err != nil {
		return nil, err
	}
	c := &Client{config: config, db: db}
	c.init()
	return c, nil
}

func (c *Client) Begin(ctx context.Context) (*Tx, error) {
	return c.BeginTx(ctx, nil)
}

func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	tx, err := c.db.Master().BeginTx(ctx, opts)
	if err != nil {
		return nil, err
	}
	t := &Tx{tx: tx, config: c.config}
	t.init()
	return t, nil
}

func (tx *Tx) Rollback() error {
	return tx.tx.Rollback()
}

func (tx *Tx) Commit() error {
	return tx.tx.Commit()
}


{{- range $index,$table := . }}
type {{$table.GoTableName}}Client struct {
	eq     xsql.ExecQuerier
	config *xsql.Config
}
func (c *{{$table.GoTableName}}Client) Find() *{{$table.PackageName}}.SelectBuilder {
	return {{$table.PackageName}}.Find(c.eq).Timeout(c.config.QueryTimeout)
}

func (c *{{$table.GoTableName}}Client) Create() *{{$table.PackageName}}.InsertBuilder {
	return {{$table.PackageName}}.Create(c.eq).Timeout(c.config.ExecTimeout)
}

func (c *{{$table.GoTableName}}Client) Update() *{{$table.PackageName}}.UpdateBuilder {
	return {{$table.PackageName}}.Update(c.eq).Timeout(c.config.ExecTimeout)
}

func (c *{{$table.GoTableName}}Client) Delete() *{{$table.PackageName}}.DeleteBuilder {
	return {{$table.PackageName}}.Delete(c.eq).Timeout(c.config.ExecTimeout)
}

{{- end}} 

