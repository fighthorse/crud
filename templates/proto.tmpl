syntax="proto3";

option go_package = "/api";

import "google/protobuf/empty.proto";

service {{.GoTableName}}Service { 
    rpc Create{{.GoTableName}}({{.GoTableName}})returns({{.GoTableName}});
    rpc Delete{{.GoTableName}}({{.GoTableName}}{{.PrimaryKey.GoColumnName}})returns(google.protobuf.Empty);
    rpc Update{{.GoTableName}}(Update{{.GoTableName}}Req)returns({{.GoTableName}});
    rpc Get{{.GoTableName}}({{.GoTableName}}{{.PrimaryKey.GoColumnName}})returns({{.GoTableName}});
    rpc List{{.GoTableName}}s(List{{.GoTableName}}sReq)returns(List{{.GoTableName}}sResp);
}

message {{.GoTableName}} {

{{- range $index,$field := .Fields }}
    //{{$field.ColumnComment}}
    {{$field.ProtoType }}	{{ $field.ColumnName }} = {{Incr $index}} ; 
{{- end}}  
}

message {{.GoTableName}}{{.PrimaryKey.GoColumnName}}{
    {{.PrimaryKey.ProtoType}} {{.PrimaryKey.ColumnName}} = 1 ;
}

message Update{{.GoTableName}}Req{

    {{.GoTableName}} {{.TableName}} = 1 ;

    repeated string update_mask  = 2 ;
}


message List{{.GoTableName}}sReq{
    // 
    int64 page = 1 ;
    // default 20
    int64 page_size = 2 ;
    // order by  for example :  [name] [-id]  -表示：倒序排序
    repeated string orderby = 4 ; 
    // 过滤条件需要自定义 for example  query name has 
    string filter = 3 ;
    // costom query filter
    // string nameHas = 4 ; select * from {{.TableName}} where name like '%{nameHas}%'
 
}

message List{{.GoTableName}}sResp{

    repeated {{.GoTableName}} {{.TableName}}s = 1 ;

    int64 total_count = 2 ;
    
    int64 page_count = 3 ;
}
